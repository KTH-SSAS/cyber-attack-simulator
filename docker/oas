#!/usr/bin/env bash

set -euo pipefail

self=${0##*/}
name=$self

! [ "${1-}" ] || ! [ . = ${1::1} ] ||
    {
        name+=$1
        shift
    }

context="$(git rev-parse --show-toplevel 2>/dev/null)" ||
    context="$(dirname "$(cd "$(dirname "$0")" && pwd)")"
dockerfile="$context/docker/Dockerfile"
home="$(dirname "$(sed -n '/WORKDIR/{s/[^/]*//;p;}' "$dockerfile")")"

# see if URL:s can easily be opened
case $(uname -s) in
    (Darwin)
        open=open
        ;;
    (Linux)
        ! command -pv xdg-open || open=xdg-open
esac
[ "${open-}" ] || open="echo open the following URL in your browser: "

_open() {
    local url=http://127.0.0.1:$1 retries=${2:-100}
    while ((retries)) && ! curl -s $url >& /dev/null
    do
        sleep .1
        ((retries--))
    done
    ! ((retries)) || $open $url
}

_exec() {
    exec docker exec --interactive --tty $name "$@"
}

_bail() {
    echo $'\x1b[1;31m'"$@"$'\x1b[m'
    exit 1
}

case ${1-} in
    build)
        find "$context" -type d -name __pycache__ -exec rm -vfr {} +
        rm -vfr "$context"/.{tox,coverage}
        shift
        # put original command-line arguments last to allow override
        docker build --tag $name --file "$dockerfile" "$@" "$context"
        ;;
    run)
        args=(
            --name $name
            --rm
            --interactive
            --tty
            --memory $((1<<33))  # 8GiB
            --shm-size $(((1<<33)/3))  # > 30% of 8GiB
            --publish 127.0.0.1:8265:8265  # Ray dashboard
            --publish 127.0.0.1:6006:6006  # TensorBoard
            --publish 127.0.0.1:8888:8888  # JupyterLab
        )
        for path in .gitconfig .ssh/known_hosts
        do ! [ -r "$HOME/$path" ] || args+=(--volume "$HOME/$path:$home/$path:ro")
        done

        if [ "${OAS_SSH_KEY-}" ]
        then
            [ / = "${OAS_SSH_KEY::1}" ] ||
                _bail OAS_SSH_KEY needs to be an absolute path [$OAS_SSH_KEY]
            [ -r "$OAS_SSH_KEY" ] ||
                _bail OAS_SSH_KEY must point to a readable file [$OAS_SSH_KEY]
            type=$(ssh-keygen -lf "$OAS_SSH_KEY" | sed 's/.*(\(.*\)).*/\1/' | tr A-Z a-z) ||
                _bail OAS_SSH_KEY must point to an SSH key [$OAS_SSH_KEY]
            args+=(--volume "$OAS_SSH_KEY:$home/.ssh/id_$type:ro")
        elif [[ "$*" != *:$home/.ssh/id_* ]]
        then
            echo $'\x1b[1;33m'
            echo To map an SSH key into the \'$name\' container,
            echo either set the OAS_SSH_KEY environment variable to the key\'s absolute path,
            echo or pass \'--volume key-absolute-path:$home/.ssh/id_TYPE:ro\' on the command line,
            echo where TYPE is type of the key [one of dsa, ecdsa, ed25519, or rsa]
            echo $'\x1b[m'

        fi

        for repl in bash python
        do
            history="$HOME/.${name}_${repl}_history"
            touch "$history"
            args+=(--volume "$history:$home/.${repl}_history:rw")
        done

        shift
        # put original command-line arguments last to allow override
        docker run "${args[@]}" "$@" $name
        ;;
    dash)
        _open 8265 1
        ;;
    tboard)
        _open 6006 25 &
        _exec poetry run tensorboard --bind_all --logdir $home/ray_results
        ;;
    jlab)
        _open 8888 25 &
        _exec poetry run jupyter-lab --allow-root --no-browser --ip=0.0.0.0
        ;;
    shell)
        _exec poetry shell
        ;;
    exec)
        shift
        _exec "$@"
        ;;
    *)
        echo "Usage: $self [.FLAVOR] [build [ARGS]|run [ARGS]|dash|tboard|jlab|shell|exec [ARGS]]"
        echo
        echo Wrapper for handling a Docker image based on this repo.
        echo
        echo When an optional .FLAVOR \(the leading dot is important\!\) is specified,
        echo the corresponding image and container will be called \`$self.FLAVOR\`.
        exit 1
esac
