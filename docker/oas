#!/usr/bin/env bash

set -euo pipefail

self=${0##*/}
name=$self

! [ . = ${1::1} ] ||
    {
        name+=$1
        shift
    }

context="$(git rev-parse --show-toplevel 2>/dev/null)" ||
    context="$(dirname "$(cd "$(dirname "$0")" && pwd)")"
dockerfile="$context/docker/Dockerfile"
home="$(dirname "$(sed -n '/WORKDIR/{s/[^/]*//;p;}' "$dockerfile")")"

# see if URL:s can easily be opened
case $(uname -s) in
    (Darwin)
        open=open
        ;;
    (Linux)
        ! command -pv xdg-open || open=xdg-open
        ;&
    (*)
        [ -v open ] ||
            open="echo open the following URL in your browser: "
        ;;
esac

_open() {
    local url=http://127.0.0.1:$1 retries=${2:-100}
    while ((retries)) && ! curl -s $url >& /dev/null
    do
        sleep .1
        ((retries--))
    done
    ! ((retries)) || $open $url
}

_exec() {
    exec docker exec --interactive --tty $name "$@"
}

case ${1-} in
    build)
        find "$context" -type d -name __pycache__ -exec rm -vfr {} +
        rm -vfr "$context"/.{tox,coverage}
        shift
        docker build "$@" --tag $name --file "$dockerfile" "$context"
        ;;
    run)
        args=(
            --name $name
            --rm
            --interactive
            --tty
            --shm-size $((1<<31))  # 2GiB
            --publish 127.0.0.1:8265:8265  # Ray dashboard
            --publish 127.0.0.1:6006:6006  # TensorBoard
        )

        for path in .ssh .gitconfig
        do ! [ -r "$HOME/$path" ] || args+=(--volume "$HOME/$path:$home/$path")
        done

        for repl in bash python
        do
            history="$HOME/.${name}_${repl}_history"
            touch "$history"
            args+=(--volume "$history:$home/.${repl}_history")
        done

        shift
        docker run "$@" "${args[@]}" $name
        ;;
    dash)
        _open 8265 1
        ;;
    tboard)
        _open 6006 25 &
        _exec poetry run tensorboard --bind_all --logdir $home/ray_results
        ;;
    shell)
        _exec poetry shell
        ;;
    exec)
        shift
        _exec "$@"
        ;;
    *)
        echo Usage: $self [.FLAVOR] [build\|run\|dash\|shell\|exec [COMMAND ARGS]]
        echo
        echo Wrapper for handling a Docker image based on this repo.
        echo
        echo When an optional .FLAVOR \(the leading dot is important\!\) is specified,
        echo the corresponding image and container will be called \`$self.FLAVOR\`.
        exit 1
esac
