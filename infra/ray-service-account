#!/usr/bin/env bash

set -e

[ / = "${0::1}" ] || exec "$0" "$@"

active=$(gcloud config configurations list --filter is_active=true --format 'value(name)')
# safety valve: script path MUST include a component matching the relevant GCP configuration
[[ "$0" = */"$active"/* ]] || {
    echo GCP configuration \'$active\' does not match any path component in \'$0\'
    exit 1
}

PROJECT=$(gcloud config get-value project)

declare -A SA_DISPLAY_NAME

# let Ray create the autoscaler service account
SA_DISPLAY_NAME[ray-autoscaler-sa-v1]=""
SA_DISPLAY_NAME[ray-registry-reader-sa]="Ray registry reader service account"

bail() {
    echo "$@"
    exit 1
}

sa_exists() {
    email=$sa@$PROJECT.iam.gserviceaccount.com

    sa_=$(gcloud iam service-accounts list --format 'value(name)' --filter $sa)
    echo [$sa :: $sa_]
    [ "${sa_##*/}" = $email ]
}

create_sa() {
    gcloud iam service-accounts create $sa --display-name "${SA_DISPLAY_NAME[$sa]}"
}

delete_sa() {
    gcloud iam service-accounts delete $email
}

role() {
    gcloud projects $1-iam-policy-binding $PROJECT \
        --member serviceAccount:$email --role $2
}

roles() {
    gcloud projects get-iam-policy $PROJECT \
        --flatten bindings \
        --filter bindings.members~$email \
        --format 'value(bindings.role)'
}

for sa in "${!SA_DISPLAY_NAME[@]}"
do
    case $1 in
        +)
            sa_exists ||
                if [ "${SA_DISPLAY_NAME[$sa]}" ]
                then create_sa
                else bail No matching service account [$sa:: $sa_]
                fi

            role add roles/artifactregistry.reader
            ;;
        -)
            ! sa_exists || {
                for role in $(roles)
                do role remove $role
                done
                delete_sa
            }
            ;;
        =)
            ;;
        *)
            bail Usage: ${0##*/} [=\|+\|-]
    esac
    sa_exists || :
done
