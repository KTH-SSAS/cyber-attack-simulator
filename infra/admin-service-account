#!/usr/bin/env bash

# CUSTOMIZE as needed ::>>
ALIAS=kas
KEYFILE=$HOME/projects/$ALIAS/.json
PROJECT=sentience-reinforce
REGION=europe-west4
ZONE=$REGION-a
SA_NAME=admin-123
# <<:: CUSTOMIZE as needed

email=$SA_NAME@$PROJECT.iam.gserviceaccount.com


ensure_logged_in() {
    [ "$(gcloud auth list --format 'value(account)' --filter status=active)" = $USER@kth.se ] ||
        gcloud auth login
}

ensure_logged_out() {
    ! [ "$(gcloud auth list --format 'value(account)' --filter account=$USER@kth.se)" ] ||
        gcloud auth revoke $USER@kth.se
}

services() {
    for api in {compute,container,artifactregistry,cloudresourcemanager}.googleapis.com
    do [ "$(gcloud services list --filter name:$api --format 'value(config.name)')" = "$api" ] ||
        gcloud services $1 $api
    done
}

roles() {
    member=serviceAccount:$email 
    for role in {compute,container,artifactregistry}.admin \
        resourcemanager.projectIamAdmin iam.serviceAccount{Admin,User}
    do gcloud projects $1-iam-policy-binding $PROJECT --member $member --role roles/$role
    done
}

setup() {
    gcloud config configurations create $ALIAS

    gcloud config set project $PROJECT

    ensure_logged_in
    services enable

    gcloud config set artifacts/location $REGION
    gcloud config set compute/region $REGION
    gcloud config set compute/zone $ZONE

    gcloud iam service-accounts create $SA_NAME

    roles add

    gcloud iam service-accounts keys create "$KEYFILE" --iam-account=$email

    gcloud auth activate-service-account --key-file "$KEYFILE" --project $PROJECT

    ensure_logged_out
}


teardown() {
    gcloud config configurations activate $ALIAS

    ensure_logged_in

    gcloud auth revoke $email

    rm -vf "$KEYFILE"

    roles remove
    # DO NOT disable service API:s to avoid unexpected havoc
    # services disable

    gcloud iam service-accounts delete $email --quiet

    if [ "$(gcloud config configurations list --filter name=default --format 'value(name)')" ]
    then verb=activate
    else verb=create
    fi
    gcloud config configurations $verb default

    gcloud config configurations delete $ALIAS --quiet

    ensure_logged_out
}

check() {
    local config=$(gcloud config configurations list --filter name=$ALIAS --format 'value(name)')
    echo [$config::$ALIAS]
    [ "$config" = $ALIAS ] && ls "$KEYFILE"
}

case $1 in
    +)
        check || setup
        ;;
    -)
        ! check || teardown
        ;;
    =) 
        ;;
    "")
        # return if the script is being sourced, otherwise fall through to usage
        [[ "$0" == "${BASH_SOURCE[0]}" ]] || return 0
        ;&
    *)
        echo Usage: ${0##*/} [=\|+\|-]
        exit 1
esac
check || [ "$1" = - ]
