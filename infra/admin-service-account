#!/usr/bin/env bash

set -e

self=${0##*/}
ALIAS=$(readlink "${0%$self}".alias)

# CUSTOMIZE as needed ::>>
KEYFILE=$HOME/.$ALIAS-auth.json
PROJECT=sentience-reinforce
REGION=europe-west4
ZONE=$REGION-a
SA_NAME=admin-123
# <<:: CUSTOMIZE as needed

SA_SUFFIX=gserviceaccount.com
EMAIL=$SA_NAME@$PROJECT.iam.$SA_SUFFIX


ensure_logged_in() {
    # make sure the active account is NOT a GCP service account
    [ "$(gcloud auth list \
        --format 'value(account)' \
        --filter 'status=active -account~$SA_SUFFIX')" ] || gcloud auth login
}

ensure_logged_out() {
    # make sure only GCP service accounts remain logged in
    for account in $(gcloud auth list --format 'value(account)' --filter=-account~$SA_SUFFIX)
    do gcloud auth revoke $account
    done
}

services() {
    for api in {compute,container,artifactregistry,cloudresourcemanager}.googleapis.com
    do [ "$(gcloud services list --filter name:$api --format 'value(config.name)')" = "$api" ] ||
        gcloud services $1 $api
    done
}

roles() {
    member=serviceAccount:$EMAIL
    for role in {compute,container,artifactregistry}.admin \
        resourcemanager.projectIamAdmin iam.serviceAccount{Admin,User}
    do gcloud projects $1-iam-policy-binding $PROJECT --member $member --role roles/$role
    done
}

setup() {
    local config=$(gcloud config configurations list --format 'value(name)' --filter $ALIAS)
    if [ "$config" = $ALIAS ]; then command=activate; else command=create; fi
    gcloud config configurations $command $ALIAS

    gcloud config set project $PROJECT
    gcloud config set account ""

    ensure_logged_in
    services enable

    gcloud config set artifacts/location $REGION
    gcloud config set compute/region $REGION
    gcloud config set compute/zone $ZONE

    [ "$(gcloud iam service-accounts list \
        --format 'value(email)' \
        --filter email=$EMAIL)" = $EMAIL ] || gcloud iam service-accounts create $SA_NAME

    gcloud iam service-accounts keys create "$KEYFILE" --iam-account=$EMAIL

    gcloud auth activate-service-account --key-file "$KEYFILE" --project $PROJECT

    roles add

    ensure_logged_out
}


teardown() {
    gcloud config configurations activate $ALIAS

    ensure_logged_in

    roles remove
    # DO NOT disable service API:s to avoid unexpected havoc
    # services disable

    gcloud auth revoke $EMAIL

    rm -vf "$KEYFILE"

    gcloud iam service-accounts delete $EMAIL --quiet

    if [ "$(gcloud config configurations list --filter name=default --format 'value(name)')" ]
    then verb=activate
    else verb=create
    fi
    gcloud config configurations $verb default

    gcloud config configurations delete $ALIAS --quiet

    ensure_logged_out
}

check() {
    local config=$(gcloud config configurations list --filter name=$ALIAS --format 'value(name)')
    echo [$config::$ALIAS]
    [ "$config" = $ALIAS ] && ls "$KEYFILE"
}

case $1 in
    +)
        check || setup
        ;;
    -)
        ! check || teardown
        ;;
    =) 
        ;;
    "")
        # turn off exit on error and return if the script is being sourced,
        # otherwise fall through to usage
        [[ "$0" == "${BASH_SOURCE[0]}" ]] || { set +e; return 0; }
        ;&
    *)
        echo Usage: $self [=\|+\|-]
        exit 1
esac
check || [ "$1" = - ]
