#!/usr/bin/env bash

set -euo pipefail

self=${0##*/}
name=$self
k8s=0
wandb=WANDB_API_KEY

! [ "${1-}" ] || ! [ . = ${1::1} ] ||
    {
        if [ . = "$1" ]
        then ((++k8s))
        else name+=$1
        fi
        shift
    }

push=europe-west4-docker.pkg.dev/sentience-reinforce/images/$name

if [[ "$(git config remote.origin.url 2>/dev/null)" = *pontusj/openai_attack_simulation* ]]
then context="$(git rev-parse --show-toplevel)"
else context="$(dirname "$(cd "$(dirname "$0")" && pwd)")"
fi
dockerfile="$context/infra/Dockerfile"
home="$(dirname "$(sed -n '/WORKDIR/{s/[^/]*//;p;}' "$dockerfile")")"

# see if URL:s can easily be opened
case $(uname -s) in
    (Darwin)
        open=open
        ;;
    (Linux)
        ! command -pv xdg-open || open=xdg-open
esac
[ "${open-}" ] || open="echo open the following URL in your browser: "


_get_head() {
    if ! [ "${head-}" ]
    then
        local clusters
        mapfile -t clusters < <(kubectl get rayclusters --output name)
        clusters=("${clusters[@]#*/}")
        case ${#clusters[*]} in
            0)
                _bail no Ray clusters found
                ;;
            1)
                cluster=${clusters[0]}
                ;;
            *)
                select cluster in "${clusters[@]}"
                do ! [ "$cluster" ] || break
                done
                [ "$cluster" ] || bail no Ray cluster selected
                ;;
        esac
        head=$cluster-ray-head
        kubectl wait --for=condition=Ready --selector cluster.ray.io/component=$head pod
    fi
}

_set_wandb_api_key() {
    local secret=wandb-secret
    if [ "${!wandb-}" ]
    then
        local key=$(kubectl get secret $secret -ojsonpath="{.data.$wandb}")
        if ! [ "$key" ]
        then
            kubectl create secret generic $secret --from-literal=$wandb="${!wandb}"
            # restart cluster pods to pick up environment variable from newly created secret
            kubectl delete pod --selector ray-cluster-name=$cluster
            unset pod
            # read the newly created key for verification
            key=$(kubectl get secret $secret -ojsonpath="{.data.$wandb}")
        fi
        if [ "$(base64 -d <<< "$key")" != "${!wandb}" ]
        then
            echo $'\x1b[1;33m'WARNING: contents of existing $secret and $wandb differ\!$'\x1b[m'
            read -sn1 -p 'Recreate? [y/N] '
            echo
            if [ y = "${REPLY,}" ]
            then
                kubectl delete secret $secret
                _set_wandb_api_key
            fi
        fi
    fi
}

_get_pod() {
    _get_head
    _set_wandb_api_key
    [ "${pod-}" ] ||
        pod=$(kubectl get pod --selector cluster.ray.io/component=$head --output name)
}

_remove_forwarding() {
    _get_head
    ! pid=$(pgrep -fx "kubectl port-forward pod/$head-.* [0-9]*:*$1") || kill $pid
}

_forward() {
    _get_pod
    forward="kubectl port-forward $pod ${2:+$2:}$1"
    # terminate previous forwarders, if any
    _remove_forwarding $1
    log="$HOME/.kfwd-$1.log"
    $forward <&- >& "$log" &
    grep -qm2 ^Forwarding < <(tail -f "$log")
    sleep .1
}

_open() {
    ! ((k8s)) || _forward $1
    $open http://127.0.0.1:$1
}

_kill_children_on_exit() {
    trap : EXIT TERM INT
    kill 0
    wait
}

_open_on_match() {
    match=$(mktemp)
    trap _kill_children_on_exit EXIT TERM INT
    {
        grep -qm1 :$1/
        _open $1
        rm -f $match
        exit
    } < <(tail -f $match) >& /dev/null &
}

_exec() {
    if ((k8s))
    then _get_pod && kubectl exec --stdin --tty $pod -- "${@:-bash}"
    else docker exec --interactive --tty $name "${@:-bash}"
    fi
}

_bail() {
    echo $'\x1b[1;31m'"$@"$'\x1b[m'
    exit 1
}

_check() {
    ((k8s)) || [ "$(docker ps --filter name=$name --format '{{.Names}}')" = "$name" ]
}

_run() {
    args=(
        --name $name
        --rm
        --interactive
        --tty
        --memory $((1<<33))  # 8GiB
        --shm-size $(((1<<33)/3))  # > 30% of 8GiB
        --publish 127.0.0.1:8265:8265  # Ray dashboard
        --publish 127.0.0.1:6006:6006  # TensorBoard
        --publish 127.0.0.1:8888:8888  # JupyterLab
        --env $wandb # pass environment variable (if one exists)
    )
    for path in .gitconfig
    do ! [ -r "$HOME/$path" ] || args+=(--volume "$HOME/$path:$home/$path:ro")
    done

    ssh="${KAS_SSH_DIR-$HOME/.ssh}"
    if [ "$ssh" ]
    then
        echo $'\x1b[1;33m'
        echo Using \'$ssh\' as KAS_SSH_DIR...
        echo
        echo To use an alternate path, set the environment variable KAS_SSH_DIR.
        echo Setting KAS_SSH_DIR to the empty string \"\" disables SSH directory mapping.
        echo $'\x1b[m'
        [ / = "${ssh::1}" ] || _bail KAS_SSH_DIR needs to be an absolute path
        [ -d "$ssh" ] || _bail KAS_SSH_DIR must point to a directory
        keys=0
        for key in "$ssh/id_"*
        do
            ! ssh-keygen -lf "$key" || ((++keys))
        done
        ((keys)) || _bail KAS_SSH_DIR must contain an SSH key
        args+=(--volume "$ssh:$home/.ssh")
    fi

    for repl in bash python
    do
        history="$HOME/.${name}_${repl}_history"
        touch "$history"
        args+=(--volume "$history:$home/.${repl}_history:rw")
    done

    num_cli_args=$1
    shift
    # put original command-line arguments last to allow override
    args+=("${@:1:$num_cli_args}")
    shift $num_cli_args
    docker run "${args[@]}" $name "$@"
}

_spawn() {
    if _check
    then _exec "$@"
    else _run 0 "$@"
    fi
}

case ${1-} in
    build)
        find "$context" -type d -name __pycache__ -exec rm -vfr {} +
        rm -vfr "$context"/.{tox,coverage}
        shift
        # put original command-line arguments last to allow override
        docker build --tag $name --file "$dockerfile" "$@" "$context"
        ;;
    push)
        # make sure registry access is enabled
        repo=${push%%/*}
        gcloud auth configure-docker --quiet $repo
        docker login $repo
        # support multi-arch images (tags _may_ need to include more info to be unique)
        tag=$push-$(uname -m)
        docker tag $name $tag
        docker push $tag
        platform="$(docker manifest inspect --verbose $tag | jq -cr .Descriptor.platform)"
        # purge any local copies of our manifest
        docker manifest rm $push || : manifest need not exist, no need to fail here
        # get a list of included image hashes **for other platforms** (if any)
        others=(
            $(docker manifest inspect $push |
                jq -cr '.manifests[] | select(.platform != '"$platform"').digest')
        ) || : no manifest is OK
        # create a new manifest
        docker manifest create $push $tag
        # append pre-existing images (for other platforms)
        ! ((${#others[*]})) ||
            docker manifest create --amend $push $(printf "$push@%s " "${others[@]}")
        # push the updated manifest and remove any local copies
        docker manifest push --purge $push
        ;;
    run)
        shift
        if ((1 == $#)) && [ - = "$1" ] 
        then docker rm --force $(docker ps --all --quiet --filter name=$name)
        else _run $# "$@"
        fi
        ;;
    kfwd)
        if [ - = "${3-}" ]
        then _remove_forwarding $2
        else _forward $2 ${3-}
        fi
        ;;
    dash)
        if [ - = "${2-}" ]
        then _remove_forwarding 8265
        else _open 8265
        fi
        ;;
    tboard)
        _open_on_match 6006
        _exec tensorboard --bind_all --logdir $home/ray_results | tee $match
        ;;
    jlab)
         _open_on_match 8888
        _spawn screen jupyter-lab --allow-root --no-browser --ip=0.0.0.0 | tee $match
        ;;
    shell)
        _spawn
        ;;
    exec)
        shift
        _exec "$@"
        ;;
    *)
        cat << USAGE
Usage: $self [.[FLAVOR]] [COMMAND [ARGS]]

Convenience wrapper for working with Docker and Kubernetes based on this repo.
NOTE: KAS stands for "KTH Attack Simulator".

When an optional .FLAVOR (the leading dot is important!) is specified,
the corresponding image and container will be called '$self.FLAVOR' [$name].

Using ONLY a single dot as the first argument activates Kubernetes mode.
Some Docker-only commands ignore Kubernetes mode.  (See below!)

Kubernetes mode assumes that the current active context points to a Kubernetes cluster,
with a Ray cluster managed by the Ray operator, and master access from this host is enabled.

The following COMMAND arguments are available:

- build [ARGS]          builds an image [$name] from the current checkout
                        ARGS are passed to 'docker build' (overriding script defaults)
                        Docker-only, Kubernetes mode IGNORED

- push                  pushes the image [$name] to the pre-configured repository
                        '$push'
                        no ARGS, Docker-only, Kubernetes mode IGNORED

- run [ARGS|-]          runs a container [$name] using the image [$name]
                        ARGS are passed to 'docker run' (overriding script defaults)
                        the special argument '-' stops/removes the [$name] container
                        Docker-only, Kubernetes mode IGNORED

- exec [CMD ARGS]       executes CMD ARGS in a container or the head pod in Kubernetes
                        when no CMD is given, 'bash' is executed by default
                        (in Docker mode, fails if no container is available)

- dash [-]              opens the Ray dashboard in a browser
                        only useful if Ray is actually up and running
                        (either locally in a container or in the cluster)
                        in Kubernetes mode, the special argument '-' clears port-forwarding

- tboard                launches 'tensorboard' in a local container or in the head pod
                        and opens a browser window to access its web-UI
                        (in Docker mode, fails if no container is available)

- jlab                  launches 'jupyterlab' in a local container or in the head pod
                        and opens a browser window to access its web-UI
                        (in Docker mode, also starts a container, if needed)

- shell                 spawns 'bash' in a local container or in the head pod
                        (in Docker mode, also starts a container, if needed)

- kfwd PORT [-|LOCAL]   sets up Kubernetes port-forwarding towards the Ray head pode for PORT
                        only useful if the Ray cluster is up and running and uses that PORT
                        the special argument '-' clears the same port-forwarding
                        an optional LOCAL port can be specified to handle conflicts
                        ALWAYS works towards Kubernetes irrespective of ./.FLAVOR
USAGE
        exit 1
        ;;
esac
